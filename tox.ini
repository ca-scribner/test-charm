# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, unit

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
;lib_path = {toxinidir}/lib/charms/operator_name_with_underscores
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
allowlist_externals =
    echo
setenv =
    PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLORS=1
passenv =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    -r requirements-fmt.txt
commands =
; fake test
;    isort {[vars]all_path}
;    black {[vars]all_path}
    echo pass

[testenv:lint]
description = Check code against coding style standards
deps =
    -r requirements-lint.txt
commands =
;fake test
;# uncomment the following line if this charm owns a lib
;# codespell {[vars]lib_path}
;    codespell {toxinidir}/. --skip {toxinidir}/.git --skip {toxinidir}/.tox \
;    --skip {toxinidir}/build --skip {toxinidir}/lib --skip {toxinidir}/venv \
;    --skip {toxinidir}/.mypy_cache --skip {toxinidir}/icon.svg
;# pflake8 wrapper supports config from pyproject.toml
;    pflake8 {[vars]all_path}
;    isort --check-only --diff {[vars]all_path}
;    black --check --diff {[vars]all_path}
    echo pass

[testenv:update-requirements]
description = Update requirements files by executing pip-compile on all requirements*.in files, including those in subdirs.
deps =
    -r requirements-update-packages.txt
allowlist_externals =
    bash
    find
    pip-compile
    xargs
commands = 
; uses 'bash -c' because piping didn't work in regular tox commands
  bash -c \'find . -type f -name "requirements*.in" | xargs --replace=\{\} pip-compile --resolver=backtracking \{\}'

[testenv:unit]
description = Run unit tests
deps =
    -r {toxinidir}/requirements-unit.txt
commands =
; fake test
;    coverage run --source={[vars]src_path} \
;    -m pytest --ignore={[vars]tst_path}integration -v --tb native -s {posargs}
;    coverage report
    echo pass

;[testenv:integration]
;description = Run integration tests
;deps =
;    pytest
;    juju
;    pytest-operator>=0.13.0
;    -r{toxinidir}/requirements.txt
;commands =
;    pytest -v --tb native --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}
